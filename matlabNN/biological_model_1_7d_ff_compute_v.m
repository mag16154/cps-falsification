%% 7 dimensional nonlinear system with dynamics%% Computing the inverse of v_primeclear all;clc;no_of_dims = 7no_of_trajs = 10traj_combs = combnk(1:no_of_trajs,2)[no_of_samples, dim2] = size(traj_combs);init_state_array = rand(no_of_samples,7)*0.02+0.99;%% Timetspan = 0:0.01:10;%% Integration/Simulationfor idx = 1:no_of_samples	init_state = init_state_array(idx,:);	[t x] = ode45(@dxdt,tspan,init_state);	traj_t(:,idx) = t;	traj_x(:,:,idx) = x;end[time_steps elems] = size(traj_t);[inputSeries, targetSeries] = createNNInput(traj_x, time_steps, no_of_dims, traj_combs);epochs = 20;neurons = 15;[net, output_v_values, target_v_values] = trainAndTestNN(inputSeries, targetSeries, epochs, neurons);plotFigures(output_v_values, target_v_values, no_of_dims, 'Biological Model 1');[o_layer_output_vals, v_vals] = validateNN(net, traj_x, time_steps, no_of_dims, traj_combs);validation_norm_values = zeros(no_of_samples, time_steps-1); for idx = 1:no_of_samples	for idy=1:(time_steps-1)		validation_norm_values(idx,idy) = norm(o_layer_output_vals(idx,:,idy) - v_vals(idx,:,idy));	endend	% ============================================================================================% dvdt% ============================================================================================function dv = dxdt(t,v)%%% variablesx1=v(1);x2=v(2);x3=v(3);x4=v(4);x5=v(5);x6=v(6);x7=v(7);%%% equationsdv = [  -0.4*x1 + 5*x3*x4;  0.4*x1 - x2;  x2 - 5*x3*x4;  5*x5*x6 - 5*x3*x4;  -5*x5*x6 + 5*x3*x4;  0.5*x7 - 5*x5*x6;  -0.5*x7 + 5*x5*x6;] ;end