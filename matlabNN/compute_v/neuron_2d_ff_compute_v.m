%% 2 dimensional nonlinear system with dynamics%% x = y%% y = mu*(1-x*x)*y - xclear all;clc;addpath('./bulid_and_test_NN/');no_of_dims = 2no_of_trajs = 10traj_combs = combnk(1:no_of_trajs,2)[no_of_samples, dim2] = size(traj_combs);init_state_array = rand(no_of_samples,no_of_dims)*10%% Timetspan = 0:0.01:10;%% Integration/Simulationneuron_ode = @(t, y) [0.04 * y(1)^2 + 5 * y(1) + 140 - y(2) + 40; ...                      0.02 * (0.2 * y(1) - y(2))];init_state = init_state_array(1,:);[t x] = ode45(neuron_ode,tspan,init_state);traj_t(:,1) = t;traj_x(:,:,1) = x;[dim1 dim2]= size(traj_t);t_size = dim1;for idx = 2:no_of_samples	init_state = init_state_array(1,:);	[t x] = ode45(neuron_ode,tspan,init_state);	traj_t(:,1) = t;	traj_x(:,:,1) = x;	[dim1 dim2]= size(traj_t);end[time_steps elems] = size(traj_t);[inputSeries, targetSeries] = createNNInput(traj_x, time_steps, no_of_dims, traj_combs);epochs =10;layers = 2;neurons = zeros(1, layers);neurons(1, 1) = 10;neurons(1, 2) = 10;preprocess = false;[net, output_mat, target_mat] = trainAndTestNN(inputSeries, targetSeries, epochs, neurons, layers, preprocess);%v_rae = validateNN(net, traj_x, time_steps, no_of_dims, traj_combs, layers, preprocess);plotFigures(output_mat, target_mat, no_of_dims, 'neuron');	% ============================================================================================% dvdt% ============================================================================================function dv = dxdt(t,v)%%% parameter set 1mu=1;%%% variablesx=v(1);y=v(2);%%% equationsdv = [    0.04*x*x + 5*v + 140 -y + 40;  % dx/dt    0.02*(0.2*x - y);  	% dy/dt] ;end