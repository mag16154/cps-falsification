%% 4 dimensional nonlinear system with dynamics%% r = vr, theta = vt, vr = r.(vt)*2 + g*cos(theta)-k*(r-L), vt = -(2*vr*vt+g*sin(theta))/r%% Computing the inverse of v_primeclear all;clc;no_of_dims = 4no_of_trajs = 7traj_combs = combnk(1:no_of_trajs,2)[no_of_samples, dim2] = size(traj_combs);first_dim_init_vals = rand(no_of_samples,1)*0.02+1.19;second_dim_init_vals = rand(no_of_samples,1)*0.02+0.49;init_state_array = zeros(no_of_samples,no_of_dims);for idx=1:no_of_samples    init_state_array(idx,1) = first_dim_init_vals(idx);    init_state_array(idx,2) = second_dim_init_vals(idx);    init_state_array(idx,3) = 0;    init_state_array(idx,4) = 0;end%% Timetspan = 0:0.01:10;%% Integration/Simulationfor idx = 1:no_of_samples	init_state = init_state_array(idx,:);	[t x] = ode45(@dxdt,tspan,init_state);	traj_t(:,idx) = t;	traj_x(:,:,idx) = x;end[time_steps elems] = size(traj_t);[inputSeries, targetSeries] = createNNInput(traj_x, time_steps, no_of_dims, traj_combs);epochs = 50;neurons = 15;[net, output_v_values, target_v_values] = trainAndTestNN(inputSeries, targetSeries, epochs, neurons);plotFigures(output_v_values, target_v_values, no_of_dims, 'Spring Pendulum');[o_layer_output_vals, v_vals] = validateNN(net, traj_x, time_steps, no_of_dims, traj_combs);validation_norm_values = zeros(no_of_samples, time_steps-1); for idx = 1:no_of_samples	for idy=1:(time_steps-1)		validation_norm_values(idx,idy) = norm(o_layer_output_vals(idx,:,idy) - v_vals(idx,:,idy));	endend% ============================================================================================% dvdt% ============================================================================================function dv = dxdt(t,v)%%% parameter set 1k=2;L=1;g=9.8;%%% variablesr=v(1);theta=v(2);vr=v(3);vt=v(4);%%% equationsdv = [   vr; %dr/dt   vt; %dtheta/dt   r*(vt.^2) + g*cos(theta)-k*(r-L); %dvr/dt   -(2*vr*vt+g*sin(theta))/r; %dvt/dt] ;end