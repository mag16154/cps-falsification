%% 4 dimensional nonlinear system with dynamics%% x1 = y1, y1 = (1-x1.^2)*y1 -x1 + (x2-x1), x2=y2, y2 = (1-x2.^2)*y2 - x2+(x1-x2)%% Computing the inverse of v_primeclear all;clc;no_of_dims = 4no_of_trajs = 10traj_combs = combnk(1:no_of_trajs,2)[no_of_samples, dim2] = size(traj_combs);first_dim_init_vals = rand(no_of_samples,1)*0.3+1.25;second_dim_init_vals = rand(no_of_samples,1)*0.1+2.25;third_dim_init_vals = rand(no_of_samples,1)*0.3+1.25;fourth_dim_init_vals = rand(no_of_samples,1)*0.1+2.25;init_state_array = zeros(no_of_samples,no_of_dims);for idx=1:no_of_samples    init_state_array(idx,1) = first_dim_init_vals(idx);    init_state_array(idx,2) = second_dim_init_vals(idx);    init_state_array(idx,3) = third_dim_init_vals(idx);    init_state_array(idx,4) = fourth_dim_init_vals(idx);end%% Timetspan = 0:0.01:10;%% Integration/Simulationfor idx = 1:no_of_samples	init_state = init_state_array(idx,:);	[t x] = ode45(@dxdt,tspan,init_state);	traj_t(:,idx) = t;	traj_x(:,:,idx) = x;end[time_steps elems] = size(traj_t);[inputSeries, targetSeries] = createNNInput(traj_x, time_steps, no_of_dims, traj_combs);epochs = 100;neurons = 25;[net, output_mat, target_mat] = trainAndTestNNPrep(inputSeries, targetSeries, epochs, neurons);%[x_mse, v_mse] = validateNNPrep(net, traj_x, time_steps, no_of_dims, traj_combs);plotFigures(output_mat, target_mat, no_of_dims, 'Coupled Vanderpol');	% ============================================================================================% dvdt% ============================================================================================function dv = dxdt(t,v)%%% variablesx=v(1);y=v(2);z=v(3);w=v(4);%%% equationsdv = [   y; %dx1/dt   (1-x^2)*y; %dy1/dt   w; %dx2/dt   (1-z^2)*w; %dy2/dt] ;end